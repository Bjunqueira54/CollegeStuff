//ESTE CÓDIGO NÃO FOI DADO NA AULA!
//É parecido com o servidor que foi criado na aula, mas com algumas modificações que eu não irei comentar. Read and find out!

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <netinet/ip.h>
#include <netinet/in.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <errno.h>

#define SERVER_PORT 6000
#define BUFFERSIZE 4096

int main(int argc, char** argv)
{
    int sockfd, msg_len;
    char msg[BUFFERSIZE];
    struct sockaddr_in sv_addr;
    
    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    
    if(sockfd == -1)
    {
        fprintf(stderr, "Erro a criar socket!\t ERROR %i\n", errno);
        return (EXIT_FAILURE);
    }
    
    memset((char *) &sv_addr, 0, sizeof(sv_addr));
    sv_addr.sin_family = AF_INET;
    sv_addr.sin_addr.s_addr = htonl(INADDR_ANY);
    sv_addr.sin_port = htons(SERVER_PORT);
    
    if(bind(sockfd, (struct sockaddr*) &sv_addr, sizeof(sv_addr)) == -1)
    {
        fprintf(stderr, "Erro no bind do socket!\t ERROR %i\n", errno);
        close(sockfd);
        return (EXIT_FAILURE);
    }
    
    fprintf(stdout, "A espera do cliente...\n\n");
    
    int i=1;
    
    while(1)
    {
        if((msg_len = recvfrom(sockfd, msg, sizeof(msg), 0, NULL, NULL)) == -1)
        {
            fprintf(stderr, "Erro a ler mensagem!\t ERROR %i\n", errno);
            return (EXIT_FAILURE);
        }
        
        if(strcmp(msg,"EOF") == 0)
        {
            fprintf(stdout, "Leitura terminada!\n");
            close(sockfd);
            return (EXIT_SUCCESS);
        }
        else
        {
            fprintf(stdout, "%i - %s\n", i, msg);
            i++;
        }
        
        memset(msg, 0, sizeof(msg));
    }
    
    return (EXIT_SUCCESS);
}
