MEDIT

1. DESCRIÇÃO GERAL

- cada utilizador tem um username (solicitado no inicio)

FORMATO DE TEXTO:

    - edição de texto num unico ecra (15 linhas, 45 colunas) alteravel (MEDIT_MAXLINES e MEDIT_MAXCOLUMNS)
    - a unidade de edição de texto em a linha do ecra (não o paragrafo)

VERIFICAÇÃO ORTOGRAFICA:

    - feita pelo Servidor, após a edição de uma linha
    - verificação consiste em saber se a palavra existe num dicionário (GNU Aspell) através de pipes entre o Servidor e Aspell
    - manter o dicionário em execução permanente

UTILIZAÇÃO EM PARALELO:

    - alterações são visiveis em real time a todos
    - edição de uma linha de cada vez por utilizador
    - movimento pelo texto com teclas de cursor
    - inicio da edição: premir ENTER na linha (utilizador ganha posse dessa linha)
    - final da edição: premir ENTER de novo
    - cancelar a edição: premir ESC
    - no ecra as linhas devem ser precedidas do seu número e do username responsável, ou sem nenhum caso não tenham sido editadas

EDIÇÃO DE TEXTO:

    MODO DE NAVEGAÇÃO DE TEXTO:
        - movimentar-se ao longo do texto com teclas de cursor
        - pode se mover por linhas em branco ou com conteudo
        - iniciar edição: premir ENTER numa linha

    MODO DE EDIÇÃO DE LINHA:
        - movimentar-se na linha com teclas de cursor (não pode mudar de linha)
        - inserir carateres (modo insert) (->texto)
        - caso não exista espaço, não são permitidos mais carateres
        - apagar carateres (modo insert) (<-texto)
        - finalizar edição: premir ENTER (servidor verifica ortografia)
            - recusa-se a finalizar a edição se houver erros 
            - alerta o utilizador para a existencia de erros 
            - mantem se aberto para ser corrigido
        - cancelar a edição feita: ESC (volta para o MODO DE NAVEGAÇÃO DE TEXTO)
            - o servidor restaura o conteudo da linha
        - carateres introduzidos em real time

ASPETOS DE ARQUITETURA DE SISTEMA:

    CLIENTE/SERVIDOR (named pipes)
        - o servidor tem 1 named pipe principal e N named pipes de iteração
            - named pipe principal recebe pedidos de ligação de novos utilizadores
            - os outros named pipes são para atender clientes entretanto recebidos
        - os clientes através da named pipe principal solicitam uma ligação
        - é feita a verificação na base de dados de usernames registados
        - named pipes de interação devem usar o username (?)
        - servidor atribui o named pipe que está a servir menos utilizadores
        - mais detalhes no inicio da pag. 4

OUTRAS CARATERISTICAS DE FUNCIONALIDADE:

    ESTATISTICAS:
        - o servidor fornece estatisticas relativas ao texto em edição:
            - numero total de palavras
            - numero de letras 
            - 5 carateres mais comuns (ordem decrescente)
            - informação atualizada ao segundo

    TIMEOUT POR INATIVIDADE:
        - uma linha em edição que não tenha alteraçĩes durante 10 segundos (var. MEDIT_TIMEOUT) é considerada livre para edição
        - libertação por timeout funciona igual a cancelar a edição (ESC)

    INTERFACE VISUAL E PERCEÇÃO VISUAL DE EDIÇÃO:
        - modificações de texto são visiveis a todos os clientes em real time
        - esta visualização pode incluir mudanças de cor do texto ou do fundo
        - detalhes ficam ao nosso rigor

    ADMINISTRADOR DO SERVIDOR:
        - administrador: utilizador lançado pelo servidor
        - o servidor recebe do administrador comandos escritos
        - estes comandos são aceites e processados em paralelo com o resto
        - as operações do utilizador são gestão de utilizadores e controlo de texto.
    
2. AQUITETURA E DETALHES ADICIONAIS DE FUNCIONALIDADE

- todos os programas são lançados através da linha de comandos
- cada um de um terminal diferente
- existe um numero maximo de utilizadores (var. MEDIT_MAXUSERS)

SERVIDOR:

    - amazena e gere toda a informação relativa à edição de texto
    - só corre um processo de cada vez
    - programa definido pelo administrador do MEDIT (configura e contrala ambiente de edição)
    - o servidor pode ser controlado diretamente através de uma interface (linha de comandos):
        - settings: apresenta os parametros de funcionamento atuais
        - load <filename>: carrega um numero maximo de linhas possivel do ficheiro de texto (conteudo do editor de texto é descartado)
        - save <filename>: salvaguarda no ficheiro o mencionada conteudo atual do editor (validando a ortografia)
        - free <linenumber>: liberta compulsivamente a linha especificada (descarta alterações entretanto introduzidas)
        - statistics: mostra estatisticas coligadas a cada segundo
        - users: mostra utilizadores (ordenados por ordem de entrada):
            - para cada username mostra a idade de sessao
            - mostra o named pipe de interação
            - a percentagem de linhas da autoria no texto atual
            - linha que se encontra a editar nesse momento (caso exista)
        - text: mostra o texto presente no mesmo formato que é apresentado aos cliente
        - shutdown: termina edições sem gravar e informa os clientes ativos

CLIENTE:

    - programa serve de interface com o utilizador para editar
    - este não valida quaisquer regras de funcinamento do MEDIT nem armazena informação localmente acerca do estado atual do texto
    - cada utilizador executa um só cliente (validação feita pelo servidor)
    - interface com o utilizador (facil de usar):
        - deve permitir a edição de uma linha de texto
        - UP, DOWN, LEFT e RIGHT: movimentar-se ao longo do texto no MODO DE MAVEGAÇÃO DE TEXTO e MODO DE EDIÇÃO DE LINHA
        - ENTER: comutar entre dois modos de funcionamento
        - ESC: abandonar o MODO DE EDIÇÃO DE LINHA
        - DEL e BACKSPACE: apagar carateres (<-texto)
    - interage com o servidor através de named pipes e sinais
    - processos clientes não interagem um com o outro diretamente
    - informação a passar entre clientes é passada pelo servidor
    
3. REQUISITOS E DESCRIÇÃO ADICIONAIS

- OBRIGATÓRIOS

SERVIDOR:

    - apenas um processo servidor em execução (não é permitida um segundo)
    - caso seja executada um novo processo servidor, esta devera terminar de imediato
    - quando termina informa todos os clientes
    - o servidor termina caso receba o sinal SIGUSR1 ou comando shutdown
    - o acesso de dados por várias threads deve ser acutelado através de macanismos de sincronização (mutexes ou semáforos)
    - o sevidor deve dar atenção a mais do que uma entrada de dados em simultaneo. isto será através de mecanismos estudados

CLIENTE:

    - podem correr vários processos em simultaneo
    - o utilizador poderá abandonar a qualquer instante a edição do texto ou o programa todo (servidor age em conformidade)
    - a interface é toda em modo texto (recurso a ncurses)
    - visão do texto permanentemente atualizada
    - cliente pode ter de dar atenção a mais que um assunto, por exemplo várias entradas de dados, em simultaneo (mecanismos estudados (threads, select...))
